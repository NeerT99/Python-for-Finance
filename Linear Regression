import datetime as dt
import numpy as np
import pandas_datareader as pdr
import pandas_datareader.data as web
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

def Linear_Regression():
    data = pd.DataFrame()
    tickers = ['AAPL', 'SPY', 'MSFT', 'TSLA']
    for t in tickers:
        data[t] = web.DataReader(t, data_source='yahoo', start='2020-1-1')['Adj Close']
    
    log_returns = np.log(data/data.shift())
    ticker_a = 'AAPL'
    ticker_b = 'TSLA'
    # Generating 1 full array full of log returns converted to numpy
    # iloc removes the first entry, since we have a NaN entry for the first row
    X = log_returns[ticker_a].iloc[1:].to_numpy().reshape(-1, 1) 
    Y = log_returns[ticker_b].iloc[1:].to_numpy().reshape(-1, 1) 

    lin_regr = LinearRegression()
    lin_regr.fit(X, Y)

    Y_pred = lin_regr.predict(X) # Line of Best Fit

    alpha = lin_regr.intercept_[0]
    beta = lin_regr.coef_[0, 0]

    fig, ax = plt.subplots()
    ax.set_title('Alpha: ' + str(round(alpha, 5)) + ', Beta: ' + str(round(beta, 3)))
    ax.scatter(X, Y)
    ax.plot(X, Y_pred, c='r') # Adding Line of Best Fit to Scatter
    plt.show()
    print(alpha, beta)
